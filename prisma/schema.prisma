// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGO_URL")
}

model User {
  id                String          @id @default(auto()) @map("_id") @db.ObjectId
  email             String          @unique
  username          String          @unique
  password          String
  globalRole        Role            @default(USER)
  verified          Boolean         @default(false)
  verificationToken String?
  activities        Activity[]
  collaborations    Collaboration[]
  userRole          UserRole[]
  creationDate      DateTime        @default(now())
  pending           Pending[]
  categConfig       Json?           @db.Json

  @@map("users")
}

model Collaboration {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  creator      User       @relation(fields: [creatorId], references: [id])
  creatorId    String     @db.ObjectId
  users        UserRole[]
  creationDate DateTime   @default(now())
  Activity     Activity[]
  Pending      Pending[]

  @@map("collaborations")
}

model UserRole {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  user            User          @relation(fields: [userId], references: [id])
  userId          String        @db.ObjectId
  collaboration   Collaboration @relation(fields: [collaborationId], references: [id])
  collaborationId String        @db.ObjectId
  role            Role

  @@map("userRoles")
}

model Activity {
  id              String         @id @default(auto()) @map("_id") @db.ObjectId
  user            User           @relation(fields: [userId], references: [id])
  userId          String         @db.ObjectId
  collaboration   Collaboration? @relation(fields: [collaborationId], references: [id])
  collaborationId String?        @db.ObjectId
  date            DateTime
  description     String?
  category        String
  subcategory     String?
  startTime       String?
  endTime         String?
  adjustment      Int?
  totalTimeMin    Int?
  timezone        String
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  @@map("activities")
}

model Pending {
  id               String         @id @default(auto()) @map("_id") @db.ObjectId
  user             User           @relation(fields: [userId], references: [id])
  userId           String         @db.ObjectId
  collaboration    Collaboration? @relation(fields: [collaborationId], references: [id])
  collaborationId  String?        @db.ObjectId
  description      String
  date             DateTime?
  time             String?
  relevance        String?        @default("AVG")
  urgency          String?        @default("AVG")
  state            Boolean        @default(false)
  recurring        Boolean        @default(false)
  periodRecurrence String?        @default("YEARLY")
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt

  @@map("pendings")
}

enum Role {
  USER
  ADMIN
  MASTER
}
